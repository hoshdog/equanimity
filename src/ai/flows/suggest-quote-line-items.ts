'use server';
/**
 * @fileOverview An AI agent that suggests a full list of line items (parts and labor) for a quote.
 * It uses the project description, user prompt, uploaded documents (RFQs, plans), and previous quotes as context.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const LineItemSchema = z.object({
  type: z.enum(['Part', 'Labour']),
  description: z.string().describe('Description of the line item (e.g., part name or labor type).'),
  quantity: z.number().describe('Quantity of the item or hours of labor.'),
  unitPrice: z.number().describe('The SELL price per unit or per hour.'),
  unitCost: z.number().describe('The COST price per unit or per hour.'),
});

export const SuggestQuoteLineItemsInputSchema = z.object({
  userPrompt: z
    .string()
    .describe('A detailed text prompt from the user describing the job requirements, scope, etc.'),
  uploadedDocuments: z.array(
      z.object({
        dataUri: z.string().describe("A document (plan, RFQ, etc.) as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'."),
        fileName: z.string(),
      })
    ).optional().describe('An array of uploaded documents for context.'),
  previousQuotesContext: z.array(z.string()).optional().describe('An array of strings, each containing JSON data for a previous, similar quote.'),
  partsCatalogue: z
    .array(
      z.object({
        partNumber: z.string(),
        description: z.string(),
        suppliers: z.array(
          z.object({
            supplier: z.string(),
            tradePrice: z.number(),
          })
        ),
      })
    ).describe('The entire parts catalogue available for quoting.'),
  laborRates: z.array(z.object({
    employeeType: z.string(),
    standardRate: z.number(),
    costRate: z.number(),
  })).describe('Available labor rates with their costs and sell prices.'),
});

export type SuggestQuoteLineItemsInput = z.infer<typeof SuggestQuoteLineItemsInputSchema>;

export const SuggestQuoteLineItemsOutputSchema = z.object({
  suggestedLineItems: z.array(LineItemSchema).describe('A complete list of suggested line items, including parts and labor, with quantities, costs, and sell prices.'),
  reasoning: z
    .string()
    .describe('A brief explanation of why these parts and labor estimates were chosen for the job.'),
  disclaimer: z
    .string()
    .describe('A mandatory disclaimer for the user to acknowledge before accepting the suggestions.'),
});

export type SuggestQuoteLineItemsOutput = z.infer<typeof SuggestQuoteLineItemsOutputSchema>;


export async function suggestQuoteLineItems(
  input: SuggestQuoteLineItemsInput
): Promise<SuggestQuoteLineItemsOutput> {
  return suggestQuoteLineItemsFlow(input);
}


const prompt = ai.definePrompt({
  name: 'suggestQuoteLineItemsPrompt',
  input: {schema: SuggestQuoteLineItemsInputSchema},
  output: {schema: SuggestQuoteLineItemsOutputSchema},
  prompt: `You are an expert quote estimator for a services business. Your task is to analyze a job description, reference documents, past quotes, and available parts/labor to create a comprehensive list of line items for a new quote.

**Primary Job Information:**
User Prompt:
"{{{userPrompt}}}"

**Reference Documents:**
{{#each uploadedDocuments}}
- Document: {{{this.fileName}}}
  {{media url=this.dataUri}}
{{/each}}

**Context from Similar Past Quotes:**
{{#each previousQuotesContext}}
- Past Quote:
  \`\`\`json
  {{{this}}}
  \`\`\`
{{/each}}

**Available Parts & Labor Rates:**
- Parts Catalogue: \`\`\`json {{{json stringify=partsCatalogue}}} \`\`\`
- Labor Rates: \`\`\`json {{{json stringify=laborRates}}} \`\`\`

**Instructions:**
1.  **Analyze all inputs**: Carefully read the user prompt and analyze the content of any uploaded documents (text from RFQs, details from plans, etc.). Use the past quotes as a reference for how similar jobs were quoted.
2.  **Identify Parts**: From the Parts Catalogue, identify all necessary parts. Determine a reasonable quantity for each. Use the trade price from the catalogue as the \`unitCost\`. Calculate a reasonable \`unitPrice\` (sell price) based on the cost.
3.  **Estimate Labor**: From the available Labor Rates, determine the type and quantity (in hours) of labor required. Use the provided cost and standard rates for the \`unitCost\` and \`unitPrice\`.
4.  **Compile Line Items**: Create a single, comprehensive list of all suggested parts and labor line items.
5.  **Provide Reasoning**: Write a brief summary explaining your choices, noting any assumptions made.
6.  **Provide Disclaimer**: Include the following mandatory disclaimer: "These suggestions are generated by AI and are intended as a starting point. They may not be fully accurate or complete. Please review all line items, quantities, and prices carefully before sending to the client."

Format the entire output as a single JSON object that conforms to the output schema.
`,
});

const suggestQuoteLineItemsFlow = ai.defineFlow(
  {
    name: 'suggestQuoteLineItemsFlow',
    inputSchema: SuggestQuoteLineItemsInputSchema,
    outputSchema: SuggestQuoteLineItemsOutputSchema,
  },
  async (input) => {
    const { output } = await prompt(input);
    return output!;
  }
);
