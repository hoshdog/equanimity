rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // =================================
    // Helper Functions
    // =================================

    // Get the requesting user's roles from their profile in the 'users' collection.
    function getUserRoles() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles;
    }
    
    // Check if the user has the 'admin' role.
    function isAdmin() {
      return 'admin' in getUserRoles();
    }

    // Check if the user has the 'client' role.
    function isClient() {
        return 'client' in getUserRoles();
    }
    
    // Check if the user is the owner of a given document.
    // Assumes the document has a 'customerId' field with the user's UID.
    function isOwner(doc) {
        return request.auth.uid == doc.customerId;
    }

    // =================================
    // Collection Rules
    // =================================

    // Users can read their own profile. Admins can read anyone's.
    // Users can create their own profile. Admins can update any profile.
    match /users/{userId} {
      allow read: if request.auth.uid == userId || isAdmin();
      allow write: if request.auth.uid == userId || isAdmin();
    }

    // Customers can only be read/written by admins.
    // This is a secure default. If clients need to edit their own details,
    // we would need a rule like: allow update: if request.auth.uid == resource.id;
    match /customers/{customerId} {
      allow read, write: if isAdmin();
      
      // Clients can't directly access their own subcollections unless specified.
      // This is a secure default.
      match /{allSubcollections=**} {
        allow read, write: if isAdmin();
      }
    }

    // Projects:
    // - Any authenticated user can read any project (e.g., for a public list).
    // - Only clients can create projects, and they must set themselves as the owner.
    // - Only the project owner (client) or an admin can update/delete it.
    match /projects/{projectId} {
      allow read: if request.auth.token != null;
      allow create: if isClient() && request.resource.data.customerId == request.auth.uid;
      allow update, delete: if isOwner(resource.data) || isAdmin();
    }

    // Jobs:
    // - Any authenticated user can read any job.
    // - Only clients can create jobs.
    // - Only the job owner (client, via project) or an admin can update/delete.
    match /jobs/{jobId} {
        allow read: if request.auth.token != null;
        allow create: if isClient(); // Further checks inside app logic needed to assign to correct project
        allow update, delete: if isOwner(resource.data) || isAdmin();
    }
    
    // Employees: Only readable/writable by admins.
    match /employees/{employeeId} {
        allow read, write: if isAdmin();
    }

    // Quotes, Purchase Orders, etc.
    // - Anyone can read.
    // - Only admins or the owner of the associated project can create/update/delete.
    match /{document=**} {
        allow read: if request.auth.token != null;
        allow write: if isAdmin() || (exists(/databases/$(database)/documents/projects/$(request.resource.data.projectId)) && isOwner(get(/databases/$(database)/documents/projects/$(request.resource.data.projectId)).data));
    }
  }
}
