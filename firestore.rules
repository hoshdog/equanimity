rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user belongs to an organization and has a specific role.
    function isOrgMember(orgId, role) {
      return exists(/databases/$(database)/documents/orgs/$(orgId)/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/orgs/$(orgId)/users/$(request.auth.uid)).data.roles.hasAny(role);
    }
    
    // Helper function to check if the write is coming from a server-side function.
    // This is a basic check. For production, consider using custom claims with an admin SDK.
    function isFromService() {
        return request.auth.token.firebase.sign_in_provider == 'custom';
    }

    // Default deny all access unless explicitly allowed.
    match /{path=**} {
      allow read, write: if false;
    }

    // Org collection can be read by its members. Creation is handled by a cloud function.
    match /orgs/{orgId} {
      allow read: if isOrgMember(orgId, ['owner', 'admin', 'member']);
      allow create, update, delete: if isOrgMember(orgId, ['owner']); // Only owners can modify org details.
      
      // Users can only read their own user profile within an org.
      match /users/{userId} {
        allow read: if request.auth.uid == userId;
        allow write: if request.auth.uid == userId; // Allow users to update their own profile info.
      }

      // Financially sensitive tokens are NEVER readable or writable by the client.
      match /tokens/{provider} {
        allow read, write: if false;
      }

      // Mapping tables can be read by members, but only written by admins/owners via Functions.
      match /mappings/{mapType}/{mapId} {
        allow read: if isOrgMember(orgId, ['owner', 'admin', 'member']);
        allow write: if isOrgMember(orgId, ['owner', 'admin']);
      }
      
      // Core data can be read by members, but writes should go through Functions for validation/auditing.
      match /jobs/{jobId} {
        allow read: if isOrgMember(orgId, ['owner', 'admin', 'member']);
        allow create, update: if isOrgMember(orgId, ['owner', 'admin']);
        allow delete: if isOrgMember(orgId, ['owner']);
      }
      
      match /contacts/{contactId} {
         allow read: if isOrgMember(orgId, ['owner', 'admin', 'member']);
         allow create, update: if isOrgMember(orgId, ['owner', 'admin']);
         allow delete: if isOrgMember(orgId, ['owner']);
      }
      
       match /items/{itemId} {
         allow read: if isOrgMember(orgId, ['owner', 'admin', 'member']);
         allow create, update: if isOrgMember(orgId, ['owner', 'admin']);
         allow delete: if isOrgMember(orgId, ['owner']);
      }
      
      // Financial Intents: CRITICAL - Only allow server-side writes.
      match /financialIntents/{finId} {
        allow read: if isOrgMember(orgId, ['owner', 'admin']);
        // Client can't create/update financial intents directly. Must use a function.
        // The ledgerRef is immutable once set.
        allow create, delete: if false;
        allow update: if isFromService() && !('ledgerRef' in request.resource.data);
      }
      
      // Documents can be created by members, but only updated by services.
      match /documents/{docId} {
        allow read: if isOrgMember(orgId, ['owner', 'admin', 'member']);
        // Allow client to create the doc with sha256. Server updates providerRef.
        allow create: if isOrgMember(orgId, ['owner', 'admin', 'member']) && 'sha256' in request.resource.data;
        allow update: if isFromService();
        allow delete: if isOrgMember(orgId, ['owner', 'admin']);
      }
      
      // Events are append-only and can only be written by the service.
      match /events/{eventId} {
        allow read: if isOrgMember(orgId, ['owner', 'admin']);
        allow create: if isFromService();
        allow update, delete: if false;
      }
    }
    
    // Outbox can only be accessed by the service.
    match /outbox/{msgId} {
       allow read, write: if false;
    }
  }
}
